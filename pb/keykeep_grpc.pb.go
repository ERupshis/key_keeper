// Code generated by protoc-gen-go-authgrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-authgrpc v1.2.0
// - protoc             v4.25.1
// source: keykeep.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the authgrpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto_keykeep.Auth/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto_keykeep.Auth/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	Login(context.Context, *LoginRequest) (*emptypb.Empty, error)
	Register(context.Context, *RegisterRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Login(context.Context, *LoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServer) Register(context.Context, *RegisterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_keykeep.Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_keykeep.Auth/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with authgrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_keykeep.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Auth_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keykeep.proto",
}

// SyncClient is the client API for Sync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncClient interface {
	Push(ctx context.Context, opts ...grpc.CallOption) (Sync_PushClient, error)
	Pull(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Sync_PullClient, error)
	PushBinary(ctx context.Context, opts ...grpc.CallOption) (Sync_PushBinaryClient, error)
	PullBinary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Sync_PullBinaryClient, error)
}

type syncClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncClient(cc grpc.ClientConnInterface) SyncClient {
	return &syncClient{cc}
}

func (c *syncClient) Push(ctx context.Context, opts ...grpc.CallOption) (Sync_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sync_ServiceDesc.Streams[0], "/proto_keykeep.Sync/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncPushClient{stream}
	return x, nil
}

type Sync_PushClient interface {
	Send(*PushRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type syncPushClient struct {
	grpc.ClientStream
}

func (x *syncPushClient) Send(m *PushRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *syncPushClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *syncClient) Pull(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Sync_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sync_ServiceDesc.Streams[1], "/proto_keykeep.Sync/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncPullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sync_PullClient interface {
	Recv() (*PullResponse, error)
	grpc.ClientStream
}

type syncPullClient struct {
	grpc.ClientStream
}

func (x *syncPullClient) Recv() (*PullResponse, error) {
	m := new(PullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *syncClient) PushBinary(ctx context.Context, opts ...grpc.CallOption) (Sync_PushBinaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sync_ServiceDesc.Streams[2], "/proto_keykeep.Sync/PushBinary", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncPushBinaryClient{stream}
	return x, nil
}

type Sync_PushBinaryClient interface {
	Send(*PushBinaryRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type syncPushBinaryClient struct {
	grpc.ClientStream
}

func (x *syncPushBinaryClient) Send(m *PushBinaryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *syncPushBinaryClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *syncClient) PullBinary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Sync_PullBinaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sync_ServiceDesc.Streams[3], "/proto_keykeep.Sync/PullBinary", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncPullBinaryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sync_PullBinaryClient interface {
	Recv() (*PullBinaryResponse, error)
	grpc.ClientStream
}

type syncPullBinaryClient struct {
	grpc.ClientStream
}

func (x *syncPullBinaryClient) Recv() (*PullBinaryResponse, error) {
	m := new(PullBinaryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SyncServer is the server API for Sync service.
// All implementations must embed UnimplementedSyncServer
// for forward compatibility
type SyncServer interface {
	Push(Sync_PushServer) error
	Pull(*emptypb.Empty, Sync_PullServer) error
	PushBinary(Sync_PushBinaryServer) error
	PullBinary(*emptypb.Empty, Sync_PullBinaryServer) error
	mustEmbedUnimplementedSyncServer()
}

// UnimplementedSyncServer must be embedded to have forward compatible implementations.
type UnimplementedSyncServer struct {
}

func (UnimplementedSyncServer) Push(Sync_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedSyncServer) Pull(*emptypb.Empty, Sync_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedSyncServer) PushBinary(Sync_PushBinaryServer) error {
	return status.Errorf(codes.Unimplemented, "method PushBinary not implemented")
}
func (UnimplementedSyncServer) PullBinary(*emptypb.Empty, Sync_PullBinaryServer) error {
	return status.Errorf(codes.Unimplemented, "method PullBinary not implemented")
}
func (UnimplementedSyncServer) mustEmbedUnimplementedSyncServer() {}

// UnsafeSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncServer will
// result in compilation errors.
type UnsafeSyncServer interface {
	mustEmbedUnimplementedSyncServer()
}

func RegisterSyncServer(s grpc.ServiceRegistrar, srv SyncServer) {
	s.RegisterService(&Sync_ServiceDesc, srv)
}

func _Sync_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncServer).Push(&syncPushServer{stream})
}

type Sync_PushServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*PushRequest, error)
	grpc.ServerStream
}

type syncPushServer struct {
	grpc.ServerStream
}

func (x *syncPushServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *syncPushServer) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Sync_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncServer).Pull(m, &syncPullServer{stream})
}

type Sync_PullServer interface {
	Send(*PullResponse) error
	grpc.ServerStream
}

type syncPullServer struct {
	grpc.ServerStream
}

func (x *syncPullServer) Send(m *PullResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Sync_PushBinary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncServer).PushBinary(&syncPushBinaryServer{stream})
}

type Sync_PushBinaryServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*PushBinaryRequest, error)
	grpc.ServerStream
}

type syncPushBinaryServer struct {
	grpc.ServerStream
}

func (x *syncPushBinaryServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *syncPushBinaryServer) Recv() (*PushBinaryRequest, error) {
	m := new(PushBinaryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Sync_PullBinary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncServer).PullBinary(m, &syncPullBinaryServer{stream})
}

type Sync_PullBinaryServer interface {
	Send(*PullBinaryResponse) error
	grpc.ServerStream
}

type syncPullBinaryServer struct {
	grpc.ServerStream
}

func (x *syncPullBinaryServer) Send(m *PullBinaryResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Sync_ServiceDesc is the grpc.ServiceDesc for Sync service.
// It's only intended for direct use with authgrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_keykeep.Sync",
	HandlerType: (*SyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _Sync_Push_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Pull",
			Handler:       _Sync_Pull_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushBinary",
			Handler:       _Sync_PushBinary_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PullBinary",
			Handler:       _Sync_PullBinary_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "keykeep.proto",
}
